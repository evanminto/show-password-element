{"mappings":"ACAA;;;;;;;;;;;;;;;CAeC,GACc,uDAAkC;IAC/C,OAAO,qBAAqB;QAAC;KAAU,CAAC;IAExC,aAAc;QACZ,KAAK;QAEL,IAAI,CAAC,UAAU,IAAI,CAAC,aAAa;IACnC;IAEA;;;;GAIC,GACD,yBAAyB,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE;QAC7C,IAAI,SAAS,WACX,IAAI,CAAC,CAAC,OAAO,GAAG,WAAW;QAG7B,IAAI,CAAC,CAAC,WAAW;IACnB;IAEA,oBAAoB;QAClB,IAAI,CAAC,aAAa;YAAE,MAAM;QAAO;QAEjC,IAAI,CAAC,IAAI,CAAC,YACR;QAGF,IAAI,CAAC,WAAW,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;IAqB7B,CAAC;QAED,IAAI,CAAC,CAAC,UAAU,EAAE,iBAAiB,SAAS,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,IAAI;QACvE,IAAI,CAAC,CAAC,WAAW;IACnB;IAEA;;GAEC,GACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,CAAC,OAAO;IACtB;IAEA;;GAEC,GACD,IAAI,QAAQ,KAAK,EAAE;QACjB,IAAI,CAAC,CAAC,OAAO,GAAG;QAEhB,IAAI,IAAI,CAAC,CAAC,OAAO,EACf,IAAI,CAAC,aAAa,WAAW;aAE7B,IAAI,CAAC,gBAAgB;QAGvB,IAAI,CAAC,CAAC,WAAW;IACnB;IAEA,CAAC,OAAO,GAAG,MAAM;IAEjB;;GAEC,GACD,IAAI,CAAC,UAAU;QACb,OAAO,IAAI,CAAC,YAAY,cAAc,0BAA0B;IAClE;IAEA;;GAEC,GACD,IAAI,CAAC,MAAM;QACT,OAAO,IAAI,CAAC,cAAc,oDACvB,IAAI,CAAC,YAAY,cAAc,6BAA6B;IACjE;IAEA;;GAEC,GACD,IAAI,CAAC,aAAa;QAChB,OAAO,IAAI,CAAC,cAAc,iDAAiD;IAC7E;IAEA;;;GAGC,GACD,CAAC,WAAW,CAAC,KAAK;QAChB,IAAI,CAAE,CAAA,MAAM,kBAAkB,iBAAgB,GAC5C;QAGF,IAAI,IAAI,CAAC,cAAc,IAAI,YAAY,wBAAwB;YAAE,SAAS;QAAK,KAAK;YAClF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACrB,IAAI,CAAC,CAAC,WAAW;QACnB;IACF;IAEA;;GAEC,GACD,CAAC,WAAW;QACV,MAAM,WAAE,OAAO,EAAE,GAAG,IAAI;QACxB,MAAM,gBAAgB,IAAI,CAAC,CAAC,aAAa;QACzC,MAAM,SAAS,IAAI,CAAC,CAAC,MAAM;QAE3B,IAAI,eACF,cAAc,OAAO,UAAU,SAAS;QAI1C,IAAI,QACF,OAAO,aAAa,gBAAgB,UAAU,SAAS;IAE3D;AACF;;;ADpJA,eAAe,OAAO,iBAAiB,CAAA,GAAA,wCAAkB","sources":["src/browser.js","src/ShowPasswordElement.js"],"sourcesContent":["import ShowPasswordElement from './ShowPasswordElement.js';\n\ncustomElements.define('show-password', ShowPasswordElement);\n","/**\n * Allows the user to toggle the visibility of the text in a password field\n *\n * @customElement show-password\n * @attr input\n * @attr visible\n * @fires toggle\n *\n * ```html\n * <show-password>\n *   <input type=\"password\">\n *   <button slot=\"hide-button\">Hide PW</button>\n *   <button slot=\"show-button\">Show PW</button>\n * </show-password>\n * ```\n */\nexport default class ShowPasswordElement extends HTMLElement {\n  static observedAttributes = ['visible'];\n\n  constructor() {\n    super();\n\n    this.visible = this.hasAttribute('visible');\n  }\n\n  /**\n   * @param {string} name\n   * @param {string|null} oldVal\n   * @param {string|null} newVal\n   */\n  attributeChangedCallback(name, oldVal, newVal) {\n    if (name === 'visible') {\n      this.#visible = newVal !== null;\n    }\n\n    this.#updateInput();\n  }\n\n  connectedCallback() {\n    this.attachShadow({ mode: 'open' });\n\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    this.shadowRoot.innerHTML = `\n      <slot></slot>\n      <slot name=\"toggle\"><button type=\"button\" part=\"toggle\" aria-pressed=\"false\">Show</button></slot>\n\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        [part=\"toggle\"] {\n          background: ButtonFace;\n          color: ButtonText;\n          border-color: ButtonBorder;\n        }\n\n        [part=\"toggle\"][aria-pressed=\"true\"] {\n          background: AccentColor;\n          color: AccentColorText;\n          border-color: AccentColor;\n        }\n      </style>\n    `;\n\n    this.#toggleSlot?.addEventListener('click', this.#handleClick.bind(this));\n    this.#updateInput();\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  get visible() {\n    return this.#visible;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  set visible(value) {\n    this.#visible = value;\n\n    if (this.#visible) {\n      this.setAttribute('visible', '');\n    } else {\n      this.removeAttribute('visible');\n    }\n\n    this.#updateInput();\n  }\n\n  #visible = false;\n\n  /**\n   * @returns {HTMLSlotElement|null}\n   */\n  get #toggleSlot() {\n    return this.shadowRoot?.querySelector('slot[name=\"toggle\"]') || null;\n  }\n\n  /**\n   * @returns {HTMLButtonElement|null}\n   */\n  get #toggle() {\n    return this.querySelector('button[slot=\"toggle\"], [slot=\"toggle\"] button')\n    || this.shadowRoot?.querySelector('button[part~=\"toggle\"]') || null;\n  }\n\n  /**\n   * @returns {HTMLInputElement|null}\n   */\n  get #passwordInput() {\n    return this.querySelector('input:is([type=\"text\"], [type=\"password\"])') || null;\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */\n  #handleClick(event) {\n    if (!(event.target instanceof HTMLButtonElement)) {\n      return;\n    }\n\n    if (this.dispatchEvent(new CustomEvent('show-password-toggle', { bubbles: true }))) {\n      this.visible = !this.visible;\n      this.#updateInput();\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  #updateInput() {\n    const { visible } = this;\n    const passwordInput = this.#passwordInput;\n    const toggle = this.#toggle;\n\n    if (passwordInput) {\n      passwordInput.type = visible ? 'text' : 'password';\n    }\n\n\n    if (toggle) {\n      toggle.setAttribute('aria-pressed', visible ? 'true' : 'false');\n    }\n  }\n}\n"],"names":[],"version":3,"file":"browser.js.map"}