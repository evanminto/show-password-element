{"mappings":"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","sources":["src/index.js","src/ShowPasswordElement.js"],"sourcesContent":["import ShowPasswordElement from './ShowPasswordElement.js';\n\nexport { ShowPasswordElement };\n","/**\n * @typedef {'input'|'toggle'|'show'|'hide'} ShowPasswordElementBehavior\n */\n\n/**\n * Allows the user to toggle the visibility of the text in a password field.\n *\n * ---\n *\n * @customElement show-password\n * @attr input\n * @attr visible\n * @slot toggle\n * @slot toggle-content\n * @part toggle\n * @part toggle-pressed\n * @fires show-password-toggle\n *\n * ---\n *\n * ### Basic Usage:\n *\n * ```html\n * <show-password>\n *   <input type=\"password\">\n * </show-password>\n * ```\n *\n * ---\n *\n * ### Custom Button:\n *\n * ```html\n * <show-password>\n *   <input type=\"password\">\n *   <button type=\"button\" slot=\"toggle\" data-behavior=\"toggle\">Show</button>\n * </show-password>\n * ```\n *\n * ---\n *\n * ### Show/Hide Buttons:\n *\n * ```html\n * <show-password>\n *   <input type=\"password\">\n *   <span slot=\"toggle\">\n *     <button type=\"button\" data-behavior=\"show\">Show</button>\n *     <button type=\"button\" data-behavior=\"hide\">Hide</button>\n *   </span>\n * </show-password>\n * ```\n */\nexport default class ShowPasswordElement extends HTMLElement {\n  static observedAttributes = ['visible'];\n\n  constructor() {\n    super();\n\n    this.visible = this.hasAttribute('visible');\n  }\n\n  /**\n   * @param {string} name\n   * @param {string|null} oldVal\n   * @param {string|null} newVal\n   */\n  attributeChangedCallback(name, oldVal, newVal) {\n    if (name === 'visible') {\n      this.#visible = newVal !== null;\n    }\n\n    this.#updateDom();\n  }\n\n  connectedCallback() {\n    this.attachShadow({ mode: 'open' });\n\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    this.shadowRoot.innerHTML = `\n      <slot></slot>\n\n      <slot name=\"toggle\">\n        <button type=\"button\" part=\"toggle\">\n          <slot name=\"toggle-content\">Show</slot>\n        </button>\n      </slot>\n\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        button {\n          background: ButtonFace;\n          color: ButtonText;\n          border-color: ButtonBorder;\n        }\n\n        button[aria-pressed=\"true\"] {\n          background: AccentColor;\n          color: AccentColorText;\n          border-color: AccentColor;\n        }\n      </style>\n    `;\n\n    this.#shadowButton?.addEventListener('click', this.#handleClickShadowButton.bind(this));\n    this.addEventListener('click', this.#handleClick.bind(this));\n    this.#updateDom();\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  get visible() {\n    return this.#visible;\n  }\n\n  /**\n   * @param {boolean} value\n   */\n  set visible(value) {\n    this.#visible = value;\n\n    if (this.#visible) {\n      this.setAttribute('visible', '');\n    } else {\n      this.removeAttribute('visible');\n    }\n\n    this.#updateDom();\n  }\n\n  #visible = false;\n\n  /**\n   * @returns {HTMLButtonElement|null}\n   */\n  get #shadowButton() {\n    return this.shadowRoot?.querySelector('button') || null;\n  }\n\n  /**\n   * @returns {HTMLElement|null}\n   */\n  get #toggleButton() {\n    return this.#getByBehavior('toggle') || this.#shadowButton;\n  }\n\n  /**\n   * @param {ShowPasswordElementBehavior} behavior\n   * @returns {HTMLElement|null}\n   */\n  #getByBehavior(behavior) {\n    return this.querySelector(`[data-behavior=\"${behavior}\"]`) || null;\n  }\n\n  /**\n   * @param {ShowPasswordElementBehavior} behavior\n   * @param {string}                      elementSelector\n   * @returns {HTMLElement[]}\n   */\n  #getAllByBehavior(behavior, elementSelector = '*') {\n    // @ts-ignore\n    return [...this.querySelectorAll(`${elementSelector}[data-behavior=\"${behavior}\"]`)];\n  }\n\n  /**\n   * @param {HTMLElement}                   el\n   * @param {ShowPasswordElementBehavior}   behavior\n   * @returns {boolean}\n   */\n  #elementHasBehavior(el, behavior) {\n    return Boolean(el.closest(`[data-behavior=\"${behavior}\"]`));\n  }\n\n  /**\n   * @returns {HTMLInputElement[]}\n   */\n  get #passwordInputs() {\n    /** @type {HTMLInputElement[]} */\n    // @ts-ignore\n    const inputs = this.#getAllByBehavior('input', 'input');\n\n    if (inputs.length === 0) {\n      // @ts-ignore\n      return [...this.querySelectorAll('input:is([type=\"text\"], [type=\"password\"])')]\n    }\n\n    return inputs;\n  }\n\n  /**\n   * @returns {void}\n   */\n  #tryToggle() {\n    if (this.dispatchEvent(new CustomEvent('show-password-toggle', { bubbles: true }))) {\n      this.visible = !this.visible;\n      this.#updateDom();\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  #handleClickShadowButton(event) {\n    console.log(event.currentTarget, event.target)\n    this.#tryToggle();\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */\n  #handleClick(event) {\n    /** @type {HTMLElement} */\n    // @ts-ignore\n    const el = event.target;\n\n    if (\n      this.#elementHasBehavior(el, 'toggle') ||\n      (this.#elementHasBehavior(el, 'show') && !this.visible) ||\n      (this.#elementHasBehavior(el, 'hide') && this.visible)\n    ) {\n      this.#tryToggle();\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  #updateDom() {\n    const { visible } = this;\n    const passwordInputs = this.#passwordInputs;\n    const toggle = this.#toggleButton;\n    const shadowButton = this.#shadowButton;\n\n    [...passwordInputs].forEach(input => input.type = visible ? 'text' : 'password');\n\n    if (toggle) {\n      toggle.setAttribute('aria-pressed', visible ? 'true' : 'false');\n    }\n\n    if (shadowButton) {\n      shadowButton.setAttribute('part', visible ? 'toggle toggle-pressed' : 'toggle');\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map"}